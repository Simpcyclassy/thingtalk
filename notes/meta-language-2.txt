// # part 1: defining the interface

// this is the most stripped down version of the ThingTalk class
// language, akin to a C/C++ header file
//
// the interface is all that is needed to typecheck a ThingTalk program,
// and nothing more

class @com.twitter {
    // the interface definition is composed of entity types, queries and actions
    // queries are idempotent functions, actions are side-effectful functions
    // (as usual)

    entity id;
    // ^ declares a type that can be referred as Entity(com.twitter:id)

    // queries are declared as "[monitorable]? [list]? <query-name>([ [in req | in opt | out] <param-name> : <type>]*);"
    // queries can be "monitorable" (deterministic) or not
    // can be "list" (0 or more results), "maybe" (0 or 1 results), or
    // exactly 1 result if both are omitted
    monitorable list query direct_messages(out sender : Entity(tt:username),
                                           out message : String);

    // actions are never monitorable and never return any result
    action send_direct_message(in req to : Entity(tt:username),
                               in req message : String);

    // documentation can be included in the interface using javadoc-like syntax
    //
    // being just documentation, it is not part of the language in any way

    /**
     * Retweet the given tweet, optionally with a comment (quote-tweet).
     *
     * @tweet_id: the ID of the tweet to retweet
     * @status: the optional comment to add to the retweet.
     */
    action retweet(in req tweet_id : Entity(com.twitter:id), in opt status : String);
}

// classes can also be abstract (ie not correspond to anything implementation)
// but "abstract" vs "concrete"
// is an implementation aspect, not an interface aspect, so this is not
// reflected at this level of the language
class @car {
    action honk_horn();
}

// a class can also "extend" one or more other class
// this is purely interface inheritance (Liskov-style subtyping) and not
// implementation inheritance

class @com.tesla.car extends @car {
    // inherits "action honk_horn()" from @car

    // other tesla specific actions and queries can be defined here


    // the class can also redeclare the inherited query/action to change
    // the parameter types (respecting covariance/contravariance)
}

// classes can also be polymorphic

class @org.thingpedia.deque<V> {
    monitorable list get_all(out value : V);
    monitorable maybe get_front(out value : V);
    monitorable maybe get_back(out value : V);

    action push_front(in req value : V);
    action push_back(in req value : V);
    action pop_front();
    action pop_back();
}

class @org.thingpedia.dictionary<K, V> {
    monitorable list get_all(out key : K, out value : V);
    // note there is no "get(K) -> V":
    // that's just "@get_all(), key == ..."

    action set(in req key : K, in req value : V);
    action delete(in req key : K);
}

// (it goes without saying, polymorphic classes cannot be touched from
// natural language directly!)


// # part 2: how to define the implementation of a given class

// the implementation comes from mixins that define how to load and
// interpret the code
// these mix-ins are classes/code fragments that provide an implementation for the certain
// features, but they do not affect the public interface of the class
// (ie, the ThingTalk-visible API)

// mixins are declared as
// "mixin @<fully-qualified-name>([[opt | req] <param-name> : <type>]*) provides [<facet>,]+;"
// <facet> defines which aspect(s) is being plugged by the mixin
// three <facet>s are defined in this version of the language:
// "loader" indicates a mixin that processes the whole class, loads any
// external dependency (ie JS code) and massages them both to conform to
// the current runtime
// "config" indicates a mixin that is responsible for creating
// instances of a given class
// "auth" indicates a mixin that is responsible for generating authentication
// headers for HTTP requests originating from the implementation

// examples of mixins:
mixin @org.thingpedia.v2() provides loader;
mixin @org.thingpedia.rss() provides loader;
mixin @org.thingpedia.embedded(parent : Entity(tt:device)) provides loader;

mixin @org.thingpedia.config.none() provides config;
mixin @org.thingpedia.config.interactive() provides config;
mixin @org.thingpedia.config.discovery(discovery_type : Enum(upnp,bluetooth)) provides config;

// some mixin can do both "config" and "auth"
mixin @org.thingpedia.auth.oauth2(req client_id : String,
                                  req client_secret : String,
                                  req token_url : URL,
                                  req authorize_url : URL,
                                  opt redirect_url : URL,
                                  opt scopes : Array(String),
                                  /* ... other stuff here ... */)
provides config, auth;
mixin @org.thingpedia.auth.basic() provides config, auth;

// some mixins are declared with "..." indicating that they can
// take undeclared parameters
mixin @org.thingpedia.config.form(...) provides config;


// the declaration syntax of mixin exists only for completeness though:
// mixins are usually declared/defined in the library and they
// are just used by the TT class

class @com.tesla {
    // mixins are used with an "import" statement;
    // the syntax is "import [<facet>,]* from @<mix-in>(<param>*);"
    import loader from @org.thingpedia.v2();

    import config, auth from @org.thingpedia.auth.basic();

    // auth basic is weird: you can decide to import both "config"
    // and "auth" from @auth.basic, or you can import just "auth"
    // and pair with a @config.form() that has "username", "password"
    // (and possibly more...)
    // that is, the above is equivalent to
    import config from @org.thingpedia.config.form(username=String,
                                                   password=String(password));
    import auth from @org.thingpedia.auth.basic();

    // (this is needed to support BodyTrace Scale, which uses Basic Auth
    // but needs username, password & serial number)
}

// subdevices are defined by passing the parent device to the subdevice
// loader
//
// subdevices must be defined in the same TT file as the parent device
class @com.tesla.car {
    import loader from @org.thingpedia.embedded(parent=@com.tesla);
}

// the following are the defaults for the mixins if unspecified
// - loader: the class cannot be loaded (it is "abstract")
// - config: the class cannot be instantiated (it is instantiated out of
// bad through some implementation-defined magic)
// - auth: none (no HTTP Authorization header)
//
// also, mixins are NOT inherited from parent classes
// inheritance is interface only

// after the import statements, the rest of the interface follows:

class @com.twitter {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.custom_oauth();

    entity id;

    // no implementation in this file: implementation will be found and linked
    // by the loader
    action send_direct_message(in req to : Entity(tt:username),
                               in req message : String);
    action retweet(in req tweet_id : Entity(com.twitter:id));

    // the loader can also read annotations, with #[] syntax
    // these are annotations, rather than the main language, because
    // they are loader defined, and they don't affect the interface
    //
    // annotations are placed after the declaration but before the ;
    monitorable list query direct_messages(out sender : Entity(tt:username),
                                           out message : String)
    #[poll_interval=10min];
}

// part 3: NL interfaces


// as discussed in class before I left, there are two kinds of natural
// language annotations

// some are compatibility kludges and/or arising from practical considerations
// due to the limitation of text generation and dialog handling

// these are:

// - short description (aka "canonical"):
//   used by Brassau's widget title
//   also used experimentally by the zero-shot learning branch of ThingNet to initialize
//   function embeddings (but this "usage" does not work so it will probably go away)
//
//   * parameters: no
//   * part of speech: verb phrase
//   * punctuation/capitalization/determiners/plurals: no
//   * pronouns/possessives: omitted
//
// - long description (aka "confirmation"):
//   used to read out a program before it is executed,
//   also used to rephrase the program in Brassau
//
//   * parameters: required inputs only, + $__device to indicate the exact device name
//     (ie. $__device would be replaced by ``Monica's Car'' as opposed to just ``Tesla Car'').
//     (the latter exists but is rarely used)
//   * part of speech: verb phrase for actions, noun phrase for queries
//   * punctuation/capitalization/determiners/plurals: normal
//   * prounouns/possessives: you/your
//
// - output (aka "formatted"):
//   used to read the results in Conversational Almond
//
//   * parameters: input and output
//   * part of speech: full sentence
//   * punctuation/capitalization/determiners/plurals: normal
//   * prounouns/possessives: you/your or omitted

// NL annotations are just annotations, and they are added using the #_[] syntax
//
// (this is to distinguish them from #[] annotations, which are processed by the loader
// mixin, and mirrors the use of _() to mark translatable text in gettext)
//
// eventually, all these annotations would go away, so we don't need to worry too much

class @com.twitter {
    entity id;

    monitorable list query direct_messages(out sender : Entity(tt:username),
                                           out message : String)
    #_[canonical="get direct message on twitter"]
    #_[confirmation="the direct messages you received on Twitter"]
    #_[formatted="@${sender} says: ${message}"]
    #[poll_interval=10min];


    action send_direct_message(in req to : Entity(tt:username),
                               in req message : String)
    #_[canonical="send direct message on twitter"]
    #_[confirmation="send a direct message to ${to} on Twitter, saying ${message}"];


    action retweet(in req tweet_id : Entity(com.twitter:id), in opt status : String)
    #_[canonical="retweet on twitter"]
    #_[confirmation="retweet ${tweet_id}"];
}


// # part 4: NL fragments for synthesis

// in a separate file, synthesizable fragments of ThingTalk can be associated with
// a corresponding NL sentence
//
// these fragments are defined as ThingTalk functions outside of a class
//
// functions can be named, in which case they define a usable name in the current
// scope (the current ThingTalk file), or unnamed
//
// in either case, the name is not relevant for the purposes of NL translation,
// because the full body of the function is the target of synthesis
//
// each fragment is associated with one or more NL utterances (indicated with
// an #_[] annotation)
// all fragments and their utterances are combined with a set of templates
// (also consisting of English+TT) to form the grammar of synthetic sentences,
// which is the expanded recursively to form the Synthetic set
//
// thus, the meaning of utterances is "anything that can be replaced meaningfully
// in the combined grammar", ie, given a grammar rule for ThingTalk of the form:
// $x -> C[y]
// (context with a y-typed hole)
//
// there will be a grammar rule for English of the form
// $x -> .. context .. $y .. context
//
// and it must be the case that the English utterance of any y derivation can be substituted
// in the $y placeholder to form a valid, meaningful English utterance for an x derivation
//
// (meaningful utterance does not mean perfectly grammatical, just intellegible enough to
// be paraphrased, and to be a starting point for training)
//
// practically, this means that streams are when-phrases, queries are noun-phrases, and actions
// are verb-phrases
//
// sometimes, queries also need verb-phrases (eg. "translate $x to $y" is a verb-phrase, but it
// corresponds to a query); this is currently indicated with a "," at the beginning of the utterance
// if the "," is present, the utterance is placed in a different grammar category
// this is a hack, and better suggestions are welcome
//
// also, for compat with the existing thingpedia set and the existing ThingTalk language,
// "let table" and "let query" are synonyms
// I reserve the right to drop "let table" at some point though

// unnamed functions

let query _ (p_sender : Entity(tt:username)) := @com.twitter.direct_messages(), sender == p_sender
#_[utterance="Twitter direct messages from ${p_sender}"];

// or equivalently

let query _ := \(p_sender : Entity(tt:username)) -> @com.twitter.direct_messages(), sender == p_sender
#_[utterance="Twitter direct messages from ${p_sender}"];

// named functions

let query direct_messages_by_sender(p_sender : Entity(tt:username)) := @com.twitter.direct_messages(), sender == p_sender
#_[utterance="Twitter direct messages from ${p_sender}"];

// or equivalently

let query direct_messages_by_sender2 := \(p_sender : Entity(tt:username)) -> @com.twitter.direct_messages(), sender == p_sender
#_[utterance="Twitter direct messages from ${p_sender}"];


// named functions can be used in later declarations in the same file

let stream \(p_sender : Entity(tt:username)) := monitor direct_messages_by_sender(p_sender=p_sender)
#_[utterance="when I receive a direct message on Twitter from ${p_sender}"]
#_[utterance="when ${p_sender} sends me a direct message on Twitter"];

// the above is exactly equivalent to

let stream \(p_sender : Entity(tt:username)) := monitor (@com.twitter.direct_messages(), sender == p_sender)
#_[utterance="when I receive a direct message on Twitter from ${p_sender}"]
#_[utterance="when ${p_sender} sends me a direct message on Twitter"];


// # part 4: using ThingTalk to implement Thingpedia


// in addition to JS, a query or action can be implemented in ThingTalk
// (regardless of what loader is used)

// for example:

class @com.twitter {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.custom_oauth();

    entity id;

    // implemented in JS:
    /**
     * Read tweets in the current user's timeline.
     */
    monitorable list query home_timeline(out text : String,
                                         out author : Entity(tt:username),
                                         out hashtags : Array(Entity(tt:hashtag)),
                                         out tweet_id : Entity(com.twitter:id));

    /**
     * Read the list of users that liked a given tweet.
     */
    monitorable list get_likes(in req tweet_id : Entity(com.twitter:id),
                               out user : Entity(tt:username));

    /**
     * Read popular tweets (> 100 likes) from the user's timeline.
     */
    monitorable list get_popular_tweets(out text : String,
                                        out author : Entity(tt:username),
                                        out hashtags : Array(Entity(tt:hashtag)),
                                        out tweet_id : Entity(com.twitter:id)) :=
        @com.twitter(id=this).home_timeline() join (aggregate count * of @com.twitter(id=this).get_likes(), count >= 100)
            on (tweet_id=tweet_id);

    // the syntax "@com.twitter(id=this)" indicates that the same device instance
    // will be used for those subfunctions

    // once defined that way, the function would be used as, eg:
    //
    // now => @com.twitter.get_popular_tweets() => notify;
    //
    // which after slot filling becomes:
    //
    // now => @com.twitter(id="...").get_popular_tweets() => notify;
    //
    // and that in turn is equivalent to:
    //
    // now => @com.twitter(id="...").home_timeline() join
    // (aggregate count * of @com.twitter(id="...").get_likes(), count >= 100)
    // on (tweet_id=tweet_id) => notify;


    // as syntactic sugar, it is possible to replace "@<class-name>(id=this)" with just
    // "this"
    // ie the above can be written as:
    monitorable list get_popular_tweets(out text : String,
                                        out author : Entity(tt:username),
                                        out hashtags : Array(Entity(tt:hashtag)),
                                        out tweet_id : Entity(com.twitter:id)) :=
        this.home_timeline() join (aggregate count * of this.get_likes(), count >= 100)
            on (tweet_id=tweet_id);
}

// a class can also be implemented completely in ThingTalk:

class @org.thingpedia.queue<V> {
    // the class does not include a loader mixin
    // instead, it declares any data structure it needs with
    // "import class @<class-name> as <name>"

    import class @org.thingpedia.deque<V> as impl;

    // <name> defines a name that can be used to refer to a
    // specific instance of the imported class, which will
    // be associated to the instance of the defining class
    //
    // that is, for each instance of @org.thingpedia.queue<V>,
    // the name impl will refer to an instance of @org.thingpedia.deque<V>
    //
    // <name> can be referred as this.<name> where needed

    action push(in req value : V) := @org.thingpedia.deque<V>(id=this.impl).push_back(value=value);

    // syntactic sugar is also available
    action pop(in req value : V) := this.impl.pop_back();

    monitorable maybe query front(out value : V) := this.impl.get_front();
}

// here is an example of how a music player that can play anything on from any file system
// (eg OneDrive, Dropbox, Google Drive, local files...) onto any audio output (eg Bluetooth, local
// speakers, ...) could be implemented:

class @org.thingpedia.music_player {
    import class @file-system as source;
    import class @audio-sink as sink;

    import class @org.thingpedia.queue<Entity(tt:path_name)> as playlist;

    action queue_song(filename : Entity(tt:path_name)) :=
        this.playlist.push(value=filename);

    // the { } block introduces ThingTalk programs that are started/stopped
    // alongside this device instance
    {
        // this rule checks if the audio output is still playing (assuming that
        // after it is done with a song it will pause itself), and if stopped,
        // it queues one more song if one is present in the list

        edge (monitor this.sink.get_playing_status()) on (status=enum(stopped))
        join (this.playlist.front())
        join (this.source.get_download_link()) on (filename=value)
        => { this.sink.play_url(url=link); this.playlist.pop(); }
    }
}


// ThingTalk code can also be used to operate on databases

// given the following from the library:
class @org.thingpedia.database_table<Key extends Entity, Record extends Record> {
    monitorable list query select_all(out primary_key : Key, out row : Record);

    monitorable maybe query select_one(in req search_key : Key, out row : Record)
        := this.select_all(), primary_key == search_key;

    // insert-or-update
    action upsert(in opt primary_key : Key, in req row : Record);
    action delete(in req primary_key : Key);
}


// you can write sticky-notes as:

class @org.thingpedia.friendhub.stickynotes {
    entity id;

    import class @org.thingpedia.database_table<Entity(org.thingpedia.friendhub.stickynotes:id),
                                                Record(author : Entity(tt:username),
                                                       text : String,
                                                       date : Date)> as store;

    action post_new_note(in req author : Entity(tt:username),
                         in req text : String) :=
        this.store.upsert(row=(author=author, text=text, date=makeDate()));

    monitorable list query all_notes(out id : Entity(org.thingpedia.friendhub.stickynotes:id),
                                     out author : Entity(tt:username),
                                     out text : String,
                                     out date : Date) :=
        [primary_key as id, row.author as author, row.text as text, row.date as date]
        of this.store.select_all();

    monitorable list recent_notes(out id : Entity(org.thingpedia.friendhub.stickynotes:id),
                                  out author : Entity(tt:username),
                                  out text : String,
                                  out date : Date) :=
        this.all_notes(), date >= makeDate() - 1day;
}


// efficient implementation is obtained by compiling the TT functions to SQL, using
// special annotations:

// in the library:
class @org.thingpedia.database_table<Key extends Entity, Record extends Record> {
    import loader @org.thingpedia.builtin();

    // the "compile_target" attribute indicates that this function should be
    // compiled to SQL rather than JS
    monitorable list query select_all(out primary_key : Key, out row : Record)
    #[compile_target="sql"];

    // effectively, select_all() is compiled to
    //
    // select primary_key, * as from ...
    //
    // instead of
    //
    // for (let { primary_key, row } of select_all()) {
    //    ...
    // }

    action upsert(in opt primary_key : Key, in req row : Record)
    #[compile_target="sql"];
    // compiled to:
    //
    // replace into ... values (...);

    action delete(in req primary_key : Key)
    #[compile_target="sql"];
    // compiled into:
    //
    // delete from ... where primary_key = ...

    // the compile_target attribute is propagated from the callee to the
    // caller
    monitorable maybe query select_one(in req search_key : Key, out row : Record)
        := this.select_all(), primary_key == search_key;

    // so the above becomes:
    //
    // select primary_key, * as from ... where primary_key = ...

    // thus, sticky notes does not need to worry about #[compile_target]: as long
    // as it uses @org.thingpedia.database_table<K, R> it will receive the most
    // efficient implementation
}


// # Appendix A: concrete formal grammar of ThingTalk

/*

$program := $statement*

$statement := $block | $empty_stmt | $mixin_def | $class_def | $let_def | $rule

$block := '{' $statement* '}'
$empty_stmt := ';'

$mixin_def := 'mixin' $fully_qualified_name 'provides' $ident ';'
$class_def := 'class' $fully_qualified_name ['extends' $fully_qualified_name]? '{' $class_member* '}'

$class_member := $import_stmt | $class_query_def | $class_action_def

$import_stmt := 'import' 'class' $fully_qualified_name 'as' $ident ';' |
    'import' $ident 'from' $fully_qualified_name '(' $input_param* ')' ';'

$class_query_def := 'monitorable'? ['list' | 'maybe']? 'query' $ident '(' $param_def* ')'
    [':=' $query]? $annotation* ';'
$class_action_def := 'action' $ident '(' $param_def* ')'
    [':=' $action]? $annotation* ';'

$let_def := $let_stream_def | $let_query_def | $let_action_def

$let_query_def := 'let' ['query' | 'table'] ['_' | $ident] '(' $param_def* ')' ':=' $query |
    'let' ['query' | 'table'] ['_' | $ident] ':=' '\' '(' $param_def* ')' '->' $query |
    'let' ['query' | 'table'] ['_' | $ident] ':=' $query
$let_stream_def := 'let' 'stream' ['_' | $ident] '(' $param_def* ')' ':=' $stream |
    'let' 'stream' ['_' | $ident] ':=' '\' '(' $param_def* ')' '->' $stream |
    'let' 'stream' ['_' | $ident] ':=' $stream
$let_action_def := 'let' 'action' ['_' | $ident] '(' $param_def* ')' ':=' $action |
    'let' 'action' ['_' | $ident] ':=' '\' '(' $param_def* ')' '->' $action |
    'let' 'action' ['_' | $ident] ':=' $action

$param_def := ['in' 'req' | 'in' 'opt' | 'out'] $ident ':' $type_ref

$rule := 'now' '=>' $query '=>' $action |
    '$stream' '=> $action

$function_call := $ident '(' $input_param* ')'
$extern_function_call :=
    $fully_qualified_name '(' $input_param* ')' '.' $ident '(' $input_param* ')' |
    $fully_qualified_name '(' $input_param* ')'

$query := $filter_query ['join' $filter_query ['on' '(' $input_param* ')']? ]*
$filter_query := $alias_query [',' $filter]?
$alias_query := $primary_query ['as' $ident]?

$primary_query := '(' $query ')' | $function_call | $extern_function_call |
    '[' [$qualified_name ['as' $ident]? ]+ ']' 'of' $primary_query |
    'aggregate' ['argmin' | 'argmax'] $value ',' $value $ident 'of' $alias_query |
    'aggregate' 'count' '*' 'of' $alias_query
    'aggregate' ['sum' | 'avg' | 'min' | 'max'] $ident 'of' $alias_query |

$stream := $filter_stream ['join' $filter_stream ['on' '(' $input_param* ')']? ]*

$filter_stream := $alias_stream [',' $filter]?
$alias_stream := $primary_stream ['as' $ident]?

$primary_stream := '(' $stream ')' | $function_call |
    'timer' '(' 'base' '=' $value ',' 'interval' '=' $value ')' |
    'edge' $alias_stream 'on' 'new' |
    'edge' $alias_stream 'on' $filter |
    'monitor' $alias_table ['on' 'new' '[' $ident+ ']' ]?
    '[' [$qualified_name ['as' $ident]? ]+ ']' 'of' $primary_stream

$action := $single_action | '{' [ $single_action ';']+ '}'

$single_action := 'notify' | 'return' |
    $function_call | $extern_function_call

$input_param := $ident '=' $value

$filter := $and_expr ['||' $and_expr]*
$and_expr := $bool_expr ['&&' $bool_expr]*
$bool_expr := '(' $filter ')' | 'true' | 'false' | $infix_predicate | $prefix_predicate | $get_predicate

$infix_predicate := $ident ['==' | '>=' | '<=' | '=~' | '~='] $value
$prefix_predicate := $ident '(' $ident ',' $value ')'
$get_predicate := $extern_function_call '{' $filter '}'

$value :=
    '(' $value ')' |
    '$undefined' |
    '$context' '.' $qualified_name |
    '$event' ['.' $ident]? |
    $date_value |
    $bool_value |
    $measure_value |
    $number_value |
    $currency_value |
    $time_value |
    $location_value |
    $enum_value |
    $entity_value |
    $var_ref_value |
    $string_value |
    $array_value

$date_value := $date_base [['+' | '-'] $measure_value]?
$date_base := 'makeDate' '(' ')' | 'makeDate' '(' $number_value ')' |
    'makeDate' '(' $number_value ',' $number_value ',' $number_value ')' |
    'makeDate' '(' $number_value ',' $number_value ',' $number_value ',' $number_value ',' $number_value ',' $number_value ')'

$bool_value := 'true' | 'false'

$measure_value := $number_value $ident ['+' $number_value $ident]*

$currency_value := 'makeCurrency' '(' $number_value ',' $ident ')'

$number_value := /[0-9]*\.[0-9]+(e[0-9]+)?/ | /[0-9]+(e[0-9]+)?/

$string_value := /"([^"\\]|\\"||\\'|\\\\|\\n)*"/ | /'([^"\\]|\\"||\\'|\\\\|\\n)*'/

$time_value := 'makeTime' '(' $number_value ',' $number_value [',' $number_value]? ')'

$location_value := 'makeLocation' '(' $number_value ',' $number_value [',' $string_value]? ')'

$enum_value := 'enum' '(' $ident ')'

$entity_value := $string_value '^^' $qualified_name ':' $ident ['(' $string_value ')']?

$var_ref_value := $qualified_name

$array_value := '[' $value* ']'


$qualified_name := $ident ['.' $ident]*
$fully_qualified_name := '@' $classident ['.' $classident]*

// identifiers are C-style identifiers: alphanumeric characters or _, but not starting
// with a number
$ident := /[_a-zA-Z][_a-zA-Z0-9]*/
/*

// class identifiers are more lenient: - is also allowed, but not at the beginning
// or at the end
// (this is to let people use DNS names, which allow -, as Thingpedia class names,
// and also because we ourselves messed up and used @security-camera already)
$classident := /[_a-zA-Z]|[_a-zA-Z][_a-zA-Z0-9-]*[_a-zA-Z0-9]/

*/

// # Appendix B: list of ThingTalk Keywords

// Universal keywords (ie, never allowed as identifiers):
// - _
// - let
// - now
// - notify
// - return
// - join
// - edge
// - monitor
// - new
// - as
// - of
// - in
// - out
// - req
// - opt
// - class
// - extends
// - mixin
// - this
// - import
// - true
// - false
// - null
// - enum
// - aggregate
//
// Additionally, identifiers starting with '__' are reserved for the implementation

// Contextual keywords (ie, allowed as identifiers in general but recognized as keywords in certain contexts)
// - on
// - from
// - provides
// - monitorable
// - list
// - maybe
// - query
// - stream
// - table
// - action
// - argmin
// - argmax
// - count
// - sum
// - avg
// - min
// - max
// - timer
// - attimer
// - base
// - interval
// - time