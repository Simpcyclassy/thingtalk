// and /* */ are comments (as in ThingTalk, JS and C/C++)
// annotations with #[] declare meta info for the object they
// are attached to

// first file: com.tesla.tt

// module_type declares how the module is implemented (that is, it declares the ID
// of a loader/adapter that can take the downloaded manifest from Thingpedia and
// make it work for the current runtime
// (org.thingpedia.v2 is "Generic Javascript")
#[module_type="org.thingpedia.v2"]

// (device category and device domain are moved out of the metadata and into the
// form with name and description because they are just for sorting/categorization in Thingpedia)
class @com.tesla {
    // all aspects related to configuration are in a single block
    configuration {
        // configuration parameters for form/interactive configuration
        params {
            // label is used by the form, question is used by interactive config
            // if question is omitted, we synth from label
            #[label="Username"]
            #[question="What is your username?"]
            // param name : type
            username : String,
            
            #[label="Password"]
            #[question="Please insert your password."]
            // string types can have hints (this is a type-system extension that
            // I have meant to do for a long time, for other purposes too)
            // hints don't affect the type system (ie, two types are equal if they differ
            // on hints), but they are useful in various places, such as choosing how
            // to prompt the user
            password : String(tt:password)
        }
        
        // authentication parameters
        auth {
            type = "basic";
        }    
        
        // the list of subdevices (using list/array literal syntax)
        subdevices = [@com.tesla.car];
    }
}

// second file: com.tesla.car.tt

// org.thingpedia.embedded -> embedded in a different package (no separate code for it)
#[module_type="org.thingpedia.embedded"]
class @com.tesla.car extends @car {
    // each element of the configuration block, as well as the whole configuration block,
    // is optional, and this is the default
    configuration {
        params {}
        
        auth {
            // auth.type == "builtin" means "no configuration is possible, this device
            // just magically appears on its own" (which is the right thing for embedded devices)
            type = "builtin";
        }
        
        subdevices = [];
    }

    // javadoc-style/jsdoc comments are for the website and people reading documentation (eg.
    // developers that use Thingpedia outside of Almond) and can describe parameters

    /**
     * Check whether the car is "mobile-enabled", ie it can be controlled remotely.
     *
     * Most other APIs will fail unless @mobile_enabled is true.
     *
     * @mobile_enabled: true if the car can be controlled, false otherwise.
     */
     
    // canonical and confirmation are as discussed
    #[canonical="is tesla car remotely accessible"]
    #[confirmation="the remote accessibility of your Tesla car"]
    // formatted is how the output is displayed to the user
    // values can appear as "$value" or "${value}"
    // (the {} are needed if the parameter is immediately followed by a letter, as in bash syntax)
    #[formatted="The remote accessibility is ${mobile_enabled}"]
    // poll interval can use the same measure literal syntax that the rest of TT uses
    #[poll_interval=10min]
    monitorable query get_mobile_enabled(out mobile_enabled : Boolean)

    /**
     * Retrieve the charging state of this Tesla car.
     *
     * @charging_state: whether the car is charging or not
     * @battery_level: the battery level, as a floating point number between 0 and 100.
     */
    #[canonical="get charge state of tesla car"]
    #[confirmation="the charge state of your Tesla car"]
    #[poll_interval=10min]
    // formatted values can include multiple messages using array literal syntax
    #[formatted=["The charging state is ${charging_state}", "The battery level is ${battery_level}%."]]
    monitorable query get_charge_state(out charging_state : Enum(charging,complete),
                                       out battery_level : Number);
    
    #[canonical="get climate state of tesla car"]
    #[confirmation="the climate state of your Tesla car"]
    #[poll_interval=10min]
    // in the placeholders, the value can be converted to a specific unit for display
    // (this is already supported)
    // currently, the syntax is ${param:unit} for unit conversion, ${param:date}/${param:time}
    // to display only part of a date, ${param:%} to scale from 0-1 to 0-100
    // in the future, more bash-like syntax might be supported, eg ${param/regexp/replacement} to substitute values
    #[formatted=["The temperature is ${inside_temperature:F} F, and it is set to ${temperature_setting:F} F.", "The air conditioner is ${conditioner_on}."]]
    monitorable query get_climate_state(out inside_temperature : Measure(C),
                                        out temperature_setting : Measure(C),
                                        out conditioner_on : Enum(on,off));
    
    // ... all other queries in @com.tesla.car ...
    
    // actions too
    // #[poll_interval] and #[formatted] annotations for actions are prohibited, and so
    // are out parameters
    // (in the future we might lift the latter restriction, to display the result of the action)
    #[canonical="flash tesla car"]
    #[confirmation="flash your Tesla car"]
    action flash();
    
    #[canonical="set target temperature of tesla car"]
    // parameters can appear in the confirmation too (same syntax as the formatted output)
    // parameters that do not appear in the confirmation but are set will be appended at the end
    // using the form "with ... equal to ..."
    #[confirmation="set the temperature of your Tesla car to $value"]
    action set_temperature(/* input parameters have slot filling questions */
                           #[question="What temperature do you want to set?"]
                           in req value : Measure(C));
}

// ThingTalk functions can be defined too, and are needed for NLP
// they are syntactically outside the class, because they use the class, but would be defined
// in the same file, and constrained to use classes declared in that file
    
// they can be unnamed
#[utterance="the state of my tesla car"]
let table _ := @com.tesla.car.get_vehicle_state();

// or the can be named
#[utterance="the battery level of my Tesla car"]
let table battery_level := @com.tesla.car.get_charge_state();

// they can use filters
#[utterance="whether my Tesla car is close to die"]
let table almost_dead := @com.tesla.car.get_charge_state(), battery_level <= 10;

// monitors
#[utterance="when my Tesla car completes charging"]
let table _ := edge (monitor @com.tesla.car.get_charge_state()) on charging_state == enum(complete);

// projections
// (unfortunately, currently projections confuse the script to generate sentences, but this
// is a bug that we plan to fix)
// (projections are also generated automatically, but eg for this program the automatic
// sentence would be "the temperature of the state of my tesla car", which is very clunky)
#[utterance="the temperature of my Tesla car"]
let table _ := [temperature] of @com.tesla.car.get_climate_state();

// multiple utterances can be provided
#[utterance=["turn ${p_power} my Tesla car air-conditioner", 
             "set the ac on my Tesla car to ${p_power}",
             "switch ${p_power} the air-con in my Tesla car"]]
let action _ := \(p_power :Enum(on,off)) -> @com.tesla.car.set_air_conditioning(power=p_power);

// currying
#[utterance="kill the ac in my tesla car"]
let action _ := @com.tesla.car.set_air_conditioning(power=enum(off));

// in the future we might allow compounds in too, although it is less obvious what part of
// speech they should correspond too

// fourth file: car.tt

// classes can be declared abstract
// implicitly, they get #[module_type="org.thingpedia.abstract"] and cannot have a "configuration {}" block
abstract class @car {
    #[canonical="horn horn of car"]
    #[confirmation="honk the horn of the car"]
    action honk_horn();
}

// abstract classes can also provide TT functions
#[utterance=["honk the horn on my car",
             "honk my car horn",
             "blow the horn in my car"]]
let action _ := @car.honk_horn();


// more examples...
// com.twitter.tt

#[module_type="org.thingpedia.v2"]
class @com.twitter {
    configuration {
        auth {
            // Twitter needs custom code for OAuth
            type = "oauth2",
            client_id = "...",
            client_secret = "..."
        }
    }

    #[canonical="twitter direct messages"]
    #[confirmation="direct messages you received on Twitter"]
    #[formatted="@${sender}: ${message}"]
    // lists are marked as such (if the "list" keyword is absent, the query returns one and only one result)
    // if a query is monitorable but there is no #[poll_interval], 
    monitorable list query direct_messages(out sender : Entity(tt:username),
                                           out message : String);
                          
    // ...
    
    #[canonical="send dm on twitter"]
    #[confirmation="send a direct message on Twitter to $to saying $message"]
    // multiple slot filling questions
    action send_direct_message(#[question="Who do you want to send the message to?"] in req to : Entity(tt:username),
                               #[question="What message do you want to send?"] in req message : String);
                               
    // classes can also define custom types
    type Entity(com.twitter:id);
    
    #[canonical="retweet"]
    #[confirmation="retween $tweet_id"]
    action retweet(#[question="What tweet do you want to retweet?"] tweet_id : Entity(com.twitter:id));
}

// com.fitbit.tt

#[module_type="org.thingpedia.v2"]
class @com.fitbit {
    configuration {
        // Fitbit can use the helpers for OAuth completely
        params {
            userId : String,
            userName: String
        }
        
        auth {
            type = "oauth2",

            scope = ['activity', 'heartrate', 'location','nutrition','profile','settings','sleep','social', 'weight'],
            authorize = 'https://www.fitbit.com/oauth2/authorize',
            get_access_token = 'https://api.fitbit.com/oauth2/token',
            redirect_uri = 'https://thingengine.stanford.edu/devices/oauth2/callback/com.fitbit',
            use_basic_client_auth = true,

            get_profile = 'https://api.fitbit.com/1/user/-/profile.json',
            profile {
                userId = "user.encodedId",
                userName = "user.userName"
            }
        }
    }
    
    // ...
}

// com.imgflip.tt

#[module_type="org.thingpedia.v2"]
class @com.imgflip {
    configuration {
        auth {
            type = "none"
        }
    }
    
    // whether the list of values for a given type is known or not is defined out of band
    // (in this case, it is, while for com.twitter:id it is not)
    type Entity(com.imgflip:meme_id);

    #[canonical="generate meme on imgflip"]
    #[confirmation="the meme $template with $text_top at the top and $text_bottom at the bottom, generated using Imflip"]
    // pictures, rdl and other rich output can be formatted as such:
    #[formatted=(type="picture", url="${picture_url}")]
    
    // if there is no "monitorable" keyword, it is a type error to monitor this query or a
    // a table derived from it
    query generate(#[question="What meme do you want to generate?"] in req template : Entity(com.imgflip:meme_id),
                   #[question="What do you want to write at the top? Leave blank for the default."] in req text_top : String,
                   #[question="What do you want to write at the bottom? Leave blank for the default."] in req text_bottom : String,
                   out picture_url : Entity(tt:picture));
                   
    #[canonical="list meme templates on imgflip"]
    #[confirmation="meme templates available on Imgflip"]
    // one can mix text and rich output
    #[formatted=["${name}", (type="picture", url="${picture_url}")]]
   
    // "list" is a valid name for a query (for compat reason), "list" is a keyword
    // only if it precedes the keyword "query" (which is always a keyword)
    list query list(/* entity type references can also be used as string hints, in which case the type
                       is a free form string, but the NN is trained with the entity names as valid unquoted values */
                    // questions can also be applied to "out" parameters (to slot fill a filter with == operator)
                    #[question="What meme do you want?"] out name : String(com.imgflip:meme_id),
                    out picture_url : Entity(tt:picture));
}

// currying into a filter:
#[utterance="meme template named ${p_name:const}"]
let table template_by_name := \(p_name :String) -> (@com.imgflip.list()), name == p_name;


// com.nytimes.tt

// RSS feeds have no JS code
#[module_type="org.thingpedia.rss"]
class @com.nytimes {
    configuration {
        auth {
            type = "none"
        }
    }
    
    #[canonical="get new york times front page"]
    #[confirmation="New York Times articles"]
    #[formatted=(type="rdl",title="${title}",description="${description}",link="${link}")]
    #[poll_interval=3h]
    // the url of the RSS feed:
    #[url="http://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml"]
    list monitorable query get_front_page(out title : String,
                                          out link : Entity(tt:url),
                                          out updated : Date,
                                          out description : String);
}


// sixth file: com.foxnews.tt

// Generic JSON devices have no JS code
#[module_type="org.thingpedia.generic_rest.v1"]
class @com.foxnews {
    configuration {
        auth {
            type = "none"
        }
    }
    
    #[canonical="headlines from fox news"]
    #[confirmation="headlines from Fox News"]
    #[formatted=(type="rdl",title="${title}",description="${description}. By ${author}.",link="${link}")]
    #[poll_interval=1h]
    // the url of the JSON endpoint:
    #[url="https://newsapi.org/v2/top-headlines?sources=fox-news&apiKey=ef94beb9abf84b33b34344bb2af925c6"],
    // the property names to traverse in the response to get to the actual values
    #[json_key="articles"]
    monitorable list query get(out title : String,
                               /* properties can be renamed from the JSON result to be more consistent with the rest of Thingpedia */
                               #[json_key="url"] out link : Entity(tt:url),
                               // well known hints for strings
                               out author : String(tt:full_name),
                               out description : String);
}


// org.thingpedia.friendhub.stickynotes.tt

// Generic JSON devices can have authentication and have actions
#[module_type="org.thingpedia.generic_rest.v1"]
class @org.thingpedia.friendhub.stickynotes {
    configuration {
        params { 
            #[label="Username"]
            username : String,
            
            #[label="Password"]
            password : String(tt:password)
        }
    
        auth {
            type = "basic"
        }
        
        // name, description and uniqueId can be computed from parameters
        uniqueId = "org.thingpedia.friendhub.stickynotes-${username}";
        name = "FriendHub StickyNotes Account of ${username}";
        description = "This is your StickyNotes Account";
    }
    
    #[canonical="list sticky notes"]
    #[confirmation="list sticky notes"]
    #[formatted="On ${date} @${author} wrote: ${post}"]
    #[url="https://colby.stanford.edu/rfb/api/sticky_notes/posts/"]
    list monitorable query list_posts(out post : String,
                                      out author : Entity(tt:username),
                                      out date : Date);
                              
    #[url="https://colby.stanford.edu/rfb/api/sticky_notes/posts/"]
    // if #[method] is omitted, POST is the default
    // (method is always GET for queries)
    #[method="POST"]
    action post(#[question="What do you want to post?"] in req post : String,
                #[question="What's your name?"] in req author : String);
}


// com.bing.tt

// simple devices can be defined in a single file with both code and metadata
#[module_type="org.thingpedia.v2"]
class @com.bing {
    configuration {
        auth {
            type = "none",
            
            // custom stuff can be placed here and accessed in the code
            // (as "this.constructor.metadata.auth.subscription_key")
            // (so the code can be stored in a public repository without exposing
            // API keys to github scrapers)
            subscription_key = "...",
        }
    }
    
    #[canonical="web search on bing"]
    #[confirmation="websites matching $query on Bing"]
    #[formatted=(type="rdl",title="${title}",description="${description}",link="${link}")]
    // poll interval must be specified if the query is defined inline, because there
    // is no way to provide the code for push notifications
    #[poll_interval=1h]
    list monitorable query web_search(#[question="What do you want to search?"] in req query : String,
                                      out title : String,
                                      out description : String,
                                      out link : Entity(tt:url)) {
        // input parameters can be accessed directly in the code
        let url = `https://api.cognitive.microsoft.com/bing/v5.0/search?count=5&mkt=en-US&setLang=en&q=#{encodeURIComponent(query)}&responseFilter=Webpages`;
        
        return Tp.Helpers.Http.get(url, {
            extraHeaders: { 'Ocp-Apim-Subscription-Key': this.constructor.metadata.auth.subscription_key }
        }).then((response) => {
            let parsedResponse = JSON.parse(response);
            // the code returns an array of object with the output parameter names (like, out-of-line JS devices)
            return parsedResponse.webPages.value.map((result) => {
                return ({
                    title: result.name,
                    description: result.snippet,
                    link: result.url
                });
            });
        });
    }
    
    #[canonical="web search on bing"]
    #[confirmation="websites matching $query on Bing"]
    #[formatted=(type="rdl",title="${title}",description="${description}",link="${link}")]
    #[poll_interval=1h]
    list monitorable query image_search(#[question="What do you want to search?"] in req query : String,
                                        out title : String,
                                        out picture_url : Entity(tt:picture_url),
                                        out link : Entity(tt:url),
                                        out width : Number,
                                        out height : Number) {
        let url = `https://api.cognitive.microsoft.com/bing/v5.0/images/search?count=5&mkt=en-US&setLang=en&q=${encodeURIComponent(query)}`;
        
        // modern JS features can be used to make the Promise-using code more readable
        const response = await Tp.Helpers.Http.get(url, {
            extraHeaders: { 'Ocp-Apim-Subscription-Key': this.constructor.metadata.auth.subscription_key }
        });
        const parsedResponse = JSON.parse(response);
        return parsedResponse.value.map((result) => {
            return ({
                query: query,
                title: result.name,
                picture_url: result.contentUrl,
                link: result.hostPageUrl
            });
        });
    }
}
