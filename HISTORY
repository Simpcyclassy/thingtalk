1.10.0-alpha.4
==============

* Update and optimize operators in ThingTalk. A set of new operators for soft
  matching for arrays are added. Soft matching for entities are now allowed
  base on display value. `or` filters are optimized as `in_array` filters.
  Both < and > operators are totally removed, use >= and <= instead. [#188]
* Add "minimal_projection" annotation. This allow developers to set parameters
  that will always be present regardless of the program; it is default to `id`
  if `id` is present [#188]
* Add "don't care" boolean expression in the format of `true($param)`. It is
  semantically equivalent to true constant, but the agent will no longer ask
  about it [#188]
* Nerf typechecking for natural language annotations since they are template
  dependent [#188]
* Misc bug fixes [#188, #190]
* Update dependencies [#188]

1.10.0-alpha.3
==============

* Misc bug fixes [#182].

1.10.0-alpha.2
==============

* Constructors for all AST classes (except Ast.Value and descendant) have been
  modified to accept a parameter indicating the location of the corresponding
  code in the original source. All callers must be updated. This is a large
  breaking change [#177].
* The word `filter` is now treated as a keyword everywhere, rather than a
  contextual keyword. Hence, parameters and functions cannot be named `filter`
  any more [#179].
* Misc bug fixes [#181].

1.10.0-alpha.1
==============

* AST classes were refactored to simplify usage and clean up the API.
  As part of the refactoring, the use of the adt library was reduced significantly,
  and refactored AST objects are native ES6 classes. Hence, constructors must
  now be called with `new`. The refactoring is not complete yet, but will
  be completed before 1.10.0 [#158]
* Scalar and list expressions have been eliminated, and merged with new subclasses
  of Ast.Value. All places where values can be referenced (parameters, filters, slice
  indices) now admit arithmetic and computation expressions. The syntax of these
  experimental features also changed incompatibly. Using computation expression
  is still experimental and subject to change [#75, #178].
* String formatting for confirmation strings and formatted output has been
  refactored to use a new library called `string-interp`. This ensures that
  both `#_[confirmation]` and `#_[formatted]` annotations use a consistent syntax
  and the same features. It also introduces more flexible formatting of numbers,
  dates, plural and ordinal forms, and optional parameters [#137, #175].
* Updated dependencies [#174, #176].

1.9.3
=====
* Added new pseudo-unit "defaultTemperature" to indicate the user's preferred
  temperature unit [#187]
* Fixed constants of type Entity(tt:function) in NN syntax [#185, #186]
* Fixed displaying times in recent versions of node

1.9.2
=====

* Added new units to better support Home Assistant [#172]

1.9.1
=====

* Misc bug fixes [#168, #169, #170, #171]

1.9.0
=====

* Fixed typechecking of enums [#167]
* Misc bug fixes [#164]
* Updated translation: Italian [#163]

Please see the previous release notes for the full list of changes and new features
in this release series.

1.9.0-beta.1
============

* Add support for selecting devices by name [#162]
* Add pictures in RDL format objects [#161]

1.9.0-alpha.4
=============

* Fix lowering `return`

1.9.0-alpha.3
=============

* Added the ability to reference the current selection on the screen, and similar
  context items, as a value in the program [Jackie Yang; #160]
* Added the ability to traverse records when formatting [#155]
* Misc bug fixes [Lim Swee Kiat; #159]

1.9.0-alpha.2
=============

* Add "aggregate filters". These are filters that invoke an aggregation or
  computation function on the left-hand-side of the comparator [#152].
* Add flattening of fields in compound types [#151].
* Allow overriding parameters in function inheritance [#151].
* Add basic support for compute operations [#152, #153].
* Add `distance` scalar operator [#153].
* Added experimental support for user-defined scalar & filter functions ("macros") [#152].
* Improved default formatting of results for functions without a `#_[formatted]`
  annotation [#152].
* Added basic jsdoc documentation, which can be built with `yarn doc` [#154].
* SchemaRetriever now caches missing classes, to avoid repeated calls to Thingpedia [#156]
* Misc bug fixes [#152, #157].

1.9.0-alpha.1
=============

* Queries can now return a `__response` hidden parameter, and if that's present,
  it overrides formatting-based outputs [#134].
* Interval timers can now be specified in terms of frequency instead of interval,
  to support e.g. "twice a week", "three times an hour" without doing arithmetic
  [Richard Grannis-Vu; #135, #136, #139].
* Added compound (record) types [#142].
* Added the ability to "extend" query functions. Extending function will inherit
  all input and output parameters of the base function, including annotations,
  and do not need to redeclare them. There is no link between the two functions other
  than shared parameters [#146, #148].
* Datasets can now be prettyprinted individually [#143].
* Build system fixes and dependency updates [#150].

1.8.0
=====

* Final bug fixes to the ThingTalk-to-SPARQL converter [Ryan Chen; #132, #133]

Please see the beta version release notes for the full list of changes and new features
in this release.

1.8.0-beta.2
============

* Misc bug fixes [#131, #128]
* Removed csv devDependency

1.8.0-beta.1
============

* New operator `result()` retrieves the latest result of a given type from the assistant
  history [#74, #104]
* `attimer()` now supports firing at multiple times, and supports and `expiration_date`
  parameter [Richard Grannis-Vu; #107]
* The `Time` has been extended to support relative times, such as "morning" and "evening";
  relative time values must be slot-filled before execution [Richard Grannis-Vu; #121, #123]
* New annotations [#97, #106]:
  - #[require_filter] indicates a that a function must be filtered in some way
    (and will not typecheck otherwise)
  - #[default_projection] contains a limited set of parameter that will be returned
    if no other projection is applied
  - #[unique] indicates that a parameter is a "unique key" for the results of
    the function; multiple equality filters with unique parameters are disallowed
  - #[handle_thingtalk] indicates that a query function is able to understanding
    whole ThingTalk subtrees instead of simple invocations [#120]
* The #_[canonical] annotation on parameters has been extended and can now include multiple
  grammatical forms (e.g. noun, verb) [#114, #117]
* New API for iterating slots: `node.iterateSlots2()`; the new API yields `Slot`
  object instead of tuples, and is generally more usable [#115]
* New API to convert ThingTalk query programs to SPARQL queries suitable to query WikiData
  [Ryan Cheng; #113, #125, #126]
* New API provides global support for internationalization, even in place where a `platform`
  object is not accessible [#115]
* Projections can now be synthesized and expressed in neural network syntax [#97, #119]
* Normalization has been extended to handle projections correctly [#97, #112]
* Both neural network and surface syntax now allow variables and `$undefined` in more
  places [#108]
* Neural network entity assignment now lowercases entity names, to match the tokenization
  of the sentence [#102]
* __const variables are now typechecked correctly, based on their name [#108]
* The obsolete JSON manifest format is no longer used by SchemaRetriever; manifest
  conversion code is now fully deprecated [#122]
* The compiler now correctly verifies and refuses to execute programs that are not fully
  slot-filled [#124]
* The formatter now correctly uses the canonical form of parameters when displaying
  aggregations or constructing fallback display forms [#127]
* Misc bug fixes [#116]
* Misc build system and test fixes [#111, #118]
* Updated dependencies [#109, #110]

1.7.3
=====

* Numbers can now be casted to Currencies implicitly; this allows
  comparing a currency value to a number without specifying the currency
  code [Aydan Pirani, #17, #95]
* Locations can now be "unresolved"; this is similar to entities
  with null value and marks a span of an input sentence corresponding
  to a location that has not been linked to a specific place on Earth [#98]
* Misc bug fixes [#100, #101]
* Updated dependencies [#99]

1.7.2
=====

* Fixed two bugs related to array literals [#96]
* Updated dependencies

1.7.1
=====

* Brown paper bag fix of the new formatting support for location

1.7.0
=====

* New feature: bookkeeping language. This new language allows to express commands that are
  not programs but are necessary for the correct operation of the dialog agent, such as yes,
  no, stop, etc. [#89].
* New feature: map, sound effect, media output types are now available for formatted query output [#92].
* New feature: `program` examples can have parameters now [#91].
* New feature: entities can be allocated sequentially when converting to neural network (NN) syntax [#93].

1.6.1
=====

This is a bug fix release. Notable fixes:

* Fixed basic authentication mixins and manifest conversion [#83]
* Fixed retrieving invalid devices in SchemaRetriever [#82, #85]
* Monitor of non-monitorable queries is now correctly rejected by the typechecker [#66, #86]
* Fixed cloning of classes [#63, #87]
* Fixed monitoring of RSS feeds [#90]
* Updated dependencies

1.6.0
=====

* The language was extended to support multiple connected statements. This involved
  a significant change in the compiler and runtime interface.
* New language feature: assignments. This is a new kind of statement that
  invokes a query eagerly and makes the result available to later statements.
* New language feature: procedures. These are a new kind of declaration that
  opens a nested scope when invoked. They can be invoked as actions.
* New language feature: `oninput`. This is a statement that declares, but does not invoke,
  actions that are related to the current program. It is expected that the frontend
  will represent `oninput` statements as buttons or suggestions.
* `iterateSlots` and `iteratePrimitives` API were adapted to reflect their use in slot-filling,
  and will not recurse into new statements that should not be slot-filled eagerly.
* More of the Ast API were converted away from adt types to ES6 classes. This includes
  the Ast.Input types and the Ast.Statement types.
* New syntax: `$?` is now a syntactic sugar for `$undefined`. Note the new syntax is
  used by default, which can cause compatibility issues with the old library.
* New language operators: `sort`, indexing and slicing. These operate on queries
  and can be used to sort or select an index or range of the result. These operators
  are fully supported (including compiler, describe, NN syntax support)
* The `argmin` and `argmax` operators are now redundant and have been removed.
* It is now possible to build the library on windows (provided that the dependencies
  are available)
* New API: `Example`s can be typechecked individually.
* Misc bug fixes

1.5.2
=====

* Fix a bug in the new nn-syntax grammar, caught by the almond-dialog-agent tests

1.5.1
=====

* Fix tarball again, missing generated files

1.5.0
=====

* BREAKING CHANGE: the SentenceGenerator module, and the associated template files, have been moved
  to [genie-toolkit](https://github.com/stanford-oval/genie-toolkit),
  and they are not in the library anymore.
* The NN syntax definition was redone to make it easier to extend, with a custom
  domain-specific language and the ability to generate a Python parser as well.
* The formatter now supports missing or invalid parameters, and will automatically
  display only the available information. In the future, this will allow for projections
  on notifications.
* Minor bug fixes and code style improvements [#68]

1.4.2
=====

* Updated messaging interface to work with the latest version of thingengine-core [#67].
* Fixed syntax of argmin/argmax [#62].
* Misc bug fixes.
* Dependencies have been updated [#61].
* Build system and CI fixes.

1.4.1
=====

* Fix botched tarball in previous release, missing important files

1.4.0
=====

* New feature: aggregations and argmin/argmax are now fully implemented, including
  the compiler and runtime parts [#56, #57, #60]
* New module: SentenceGenerator; used to generate programs and their associated sentences.
  The generator uses a new DSL, dubbed yasgg (Yet Another Sentence Generator Generator,
  a reference to the well-known parser generator YACC).
  This module is epxerimental and expected to change in the future.
* Internal modules have been reorganized.
* Misc bug fixes [#47, #55, #58].
* Dependencies have been updated [#54].

1.3.1
=====

* Misc bug fixes

1.3.0
=====

* New Class syntax to replace Thingpedia manifests.
* New syntax on queries to indicate whether they are monitorable and/or lists.
* New language component: mixins and import statements.
* New language component: dataset and examples; these replace the use of declarations
  for composable code snippets in Thingpedia.
* New language component: annotations; these can be applied to function declarations
  in classes, to classes themselves, and to examples in datasets.
* Minor API changes in the Ast module. Ast API is still considered experimental and
  is not covered by the API stability promise.
* The API of SchemaRetriever has changed significantly, following the changes in
  the upstream Thingpedia API.
* The syntax of Stream Joins have changed from "$stream join $table" to "$stream => $table";
  the old syntax is accepted for compatibility but not generated. Other libraries
  should be updated to follow suit.
* The value type Builtin.ExampleProgram was removed. It was never meant for use
  outside of the Almond platform.
* Misc bug fixes [#11, #12].
* Build system and CI fixes.
* Dependencies have been updated.

1.2.0
=====

* New API to check programs without transforming them
* Misc bug fixes
* Build system and CI fixes

1.1.1
=====

* Fix compiling of picture constants
* Build system and CI fixes

1.1.0
=====

* New feature: support for quote-free programs in NN syntax (experimental, might change)
* Compiled ThingTalk code uses native async functions instead of generator functions now
* More tests

1.0.0
=====

* First official release
* Includes the ThingTalk language, compiler, and library to manipulate ThingTalk programs
* Includes a preview (not yet stable) of the Comma extensions for ThingTalk
