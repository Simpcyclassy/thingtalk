{
    "module_type": "org.thingpedia.v2",
    "params": {},
    "category": "data",
    "subcategory": "service",
    "types": [],
    "child_types": [],
    "auth": {
        "type": "none"
    },
    "queries": {
        "sunrise": {
            "args": [
                {
                    "name": "location",
                    "type": "Location",
                    "question": "What location do you want sun time info for?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "date",
                    "type": "Date",
                    "question": "What day are you interested in?",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "sunrise_time",
                    "type": "Time",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "sunset_time",
                    "type": "Time",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Information about sunrise and sunset",
            "confirmation": "the sunrise and sunset time for location $location",
            "confirmation_remote": "",
            "canonical": "get sunrise on weatherapi",
            "formatted": [
                {
                    "type": "text",
                    "text": "Sun times on ${date:date} for ${location}: rises at ${sunrise_time}, sets at ${sunset_time}"
                }
            ],
            "poll_interval": 86400000,
            "is_list": false
        },
        "moon": {
            "args": [
                {
                    "name": "location",
                    "type": "Location",
                    "question": "What location do you want moon time info for?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "date",
                    "type": "Date",
                    "question": "What day are you interested in?",
                    "is_input": true,
                    "required": false
                },
                {
                    "name": "phase",
                    "type": "Enum(new_moon,waxing_crescent,first_quarter,waxing_gibbous,full_moon,waning_gibbous,third_quarter,waning_crescent)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Information about moon times and moon phase",
            "confirmation": "the moon phase for $location",
            "confirmation_remote": "",
            "canonical": "get moon phase on weatherapi",
            "formatted": [
                {
                    "type": "text",
                    "text": "Moon phase on ${date:date} for ${location}: ${phase}."
                }
            ],
            "poll_interval": 86400000,
            "is_list": false
        },
        "current": {
            "args": [
                {
                    "name": "location",
                    "type": "Location",
                    "question": "What location do you want the current weather for?",
                    "is_input": true,
                    "required": true
                },
                {
                    "name": "temperature",
                    "type": "Measure(C)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "wind_speed",
                    "type": "Measure(mps)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "humidity",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "cloudiness",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "fog",
                    "type": "Number",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "status",
                    "type": "Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy)",
                    "question": "",
                    "is_input": false,
                    "required": false
                },
                {
                    "name": "icon",
                    "type": "Entity(tt:picture)",
                    "question": "",
                    "is_input": false,
                    "required": false
                }
            ],
            "doc": "Information about current weather",
            "confirmation": "the current weather for $location",
            "confirmation_remote": "",
            "canonical": "get current weather on weatherapi",
            "formatted": [
                {
                    "type": "text",
                    "text": "Current weather for ${location}: ${status}, temperature ${temperature:C} C, wind speed ${wind_speed:mps} m/s, humidity ${humidity}%, cloudiness ${cloudiness}%, fog ${fog}%."
                }
            ],
            "poll_interval": 3600000,
            "is_list": false
        }
    },
    "actions": {},
    "examples": [
        {
            "utterance": "when it's $p_status at location $p_location",
            "program": "let stream x := \\(p_status :Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), status == p_status);"
        },
        {
            "utterance": "sunrise and sunset for location $p_location",
            "program": "let table x := \\(p_location :Location) -> @org.thingpedia.weather.sunrise(location=p_location);"
        },
        {
            "utterance": "sunrise and sunset for location $p_location on date $p_date",
            "program": "let table x := \\(p_location :Location, p_date :Date) -> @org.thingpedia.weather.sunrise(location=p_location, date=p_date);"
        },
        {
            "utterance": "moon phase for location $p_location",
            "program": "let table x := \\(p_location :Location) -> @org.thingpedia.weather.moon(location=p_location);"
        },
        {
            "utterance": "moon phase for location $p_location on date $p_date",
            "program": "let table x := \\(p_location :Location, p_date :Date) -> @org.thingpedia.weather.moon(location=p_location, date=p_date);"
        },
        {
            "utterance": "the weather in $p_location",
            "program": "let table x := \\(p_location :Location) -> @org.thingpedia.weather.current(location=p_location);"
        },
        {
            "utterance": "when the temperature in $p_location is above $p_temperature",
            "program": "let stream x := \\(p_temperature :Measure(C), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), temperature >= p_temperature);"
        },
        {
            "utterance": "when the temperature in $p_location is below $p_temperature",
            "program": "let stream x := \\(p_temperature :Measure(C), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), temperature <= p_temperature);"
        },
        {
            "utterance": "when the temperature in $p_location is below freezing",
            "program": "let stream x := \\(p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), temperature <= 0C);"
        },
        {
            "utterance": "when the humidity in $p_location is above $p_humidity",
            "program": "let stream x := \\(p_humidity :Number, p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), humidity >= p_humidity);"
        },
        {
            "utterance": "when the humidity in $p_location is below $p_humidity",
            "program": "let stream x := \\(p_humidity :Number, p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), humidity <= p_humidity);"
        },
        {
            "utterance": "when it starts raining in $p_location",
            "program": "let stream x := \\(p_location :Location) -> edge (monitor (@org.thingpedia.weather.current(location=p_location))) on status == enum(raining);"
        },
        {
            "utterance": "when it starts snowing in $p_location",
            "program": "let stream x := \\(p_location :Location) -> edge (monitor (@org.thingpedia.weather.current(location=p_location))) on status == enum(snowy);"
        },
        {
            "utterance": "when it stops raining in $p_location",
            "program": "let stream x := \\(p_location :Location) -> edge (monitor (@org.thingpedia.weather.current(location=p_location))) on !(status == enum(raining));"
        },
        {
            "utterance": "when it stops snowing in $p_location",
            "program": "let stream x := \\(p_location :Location) -> edge (monitor (@org.thingpedia.weather.current(location=p_location))) on !(status == enum(snowy));"
        },
        {
            "utterance": "when the wind speed in $p_location is above $p_wind_speed",
            "program": "let stream x := \\(p_wind_speed :Measure(mps), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), wind_speed >= p_wind_speed);"
        },
        {
            "utterance": "when it is more humid than $p_humidity in $p_location",
            "program": "let stream x := \\(p_humidity :Number, p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), humidity >= p_humidity);"
        },
        {
            "utterance": "when it 's hotter than $p_temperature in $p_location",
            "program": "let stream x := \\(p_temperature :Measure(C), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), temperature >= p_temperature);"
        },
        {
            "utterance": "when it 's colder than $p_temperature in $p_location",
            "program": "let stream x := \\(p_temperature :Measure(C), p_location :Location) -> monitor ((@org.thingpedia.weather.current(location=p_location)), temperature <= p_temperature);"
        },
        {
            "utterance": "the weather",
            "program": "let table x := @org.thingpedia.weather.current();"
        }
    ],
    "version": 98,
    "developer": false
}
